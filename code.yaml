esphome:
  name: controlpad
  friendly_name: ControlPad

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Controlpad Fallback Hotspot"
    password: "wHjqyQOLnaPa"

globals:
  - id: page_active
    type: int
    initial_value: '0'
  - id: last_value
    type: int
    initial_value: '-1'
  - id: pot_val
    type: int
    initial_value: '0'

i2c:
  sda: GPIO6
  scl: GPIO7
  frequency: 800kHz
  scan: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: true
    name: "Button1"
    on_press:
      - display.page.show: page1
      - lambda: |-
          id(page_active) = 1;  

  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: true
    name: "Button2"
    on_press:
      - display.page.show: page2
      - lambda: |-
          id(page_active) = 2;
  
  - platform: gpio
    pin:
      number: GPIO21
      mode: INPUT_PULLUP
      inverted: true
    name: "toggle1"
    on_press:
      then:
      - if:
          condition:
            lambda: |-
              return id(page_active) == 1;
          then:
            - homeassistant.service:
                service: light.toggle
                data:
                  entity_id: light.led_controller_1_light_bar

sensor:
  - platform: homeassistant
    name: "Bar Light Brightness"
    id: led_controller_1_light_bar_brightness
    entity_id: light.led_controller_1_light_bar
    attribute: brightness
    unit_of_measurement: "%"
    filters:
      - lambda: |-
          if (isnan(x)) return 0.0f;
          return int(x * 100.0f / 255.0f);

  - platform: adc
    pin: GPIO3
    name: "potentiometer1"
    id: potentiometer1
    attenuation: 12db        # allow 0–3.3 V range
    update_interval: 20ms
    unit_of_measurement: "%"
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 5
      - lambda: |-
          if (isnan(x)) return 0.0f;
          int pot_val = int(x * 100.0f / 2.9f);
          if (pot_val > 100) pot_val = 100;
          return pot_val;
      - delta: 1.0

    on_value:
      then:
      - if:
          condition:
            lambda: |-
              return id(page_active) == 1;
          then:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.led_controller_1_light_bar
                  brightness_pct: !lambda 'return (int)x;'

# SH1106 128×64 over I2C
display:
  - platform: ssd1306_i2c
    model: SH1106 128x64
    id: display1
    address: 0x3C
    rotation: 0
    update_interval: 100ms
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(font1), "Light: %.0f%%", id(led_controller_1_light_bar_brightness).state);
          it.printf(0, 20, id(font1), "Pot: %.0f%%", id(potentiometer1).state);
      - id: page2
        lambda: |-
          it.print(0, 10, id(font1), "This is page 2!");

font:
  - file: "gfonts://Ubuntu"
    id: font1
    size: 20

captive_portal:
